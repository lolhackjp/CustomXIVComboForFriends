<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XIVSlothCombo</name>
    </assembly>
    <members>
        <member name="T:XIVSlothCombo.Attributes.BlueInactiveAttribute">
            <summary> Attribute documenting which skill the feature uses the user does not have active currently. </summary>
        </member>
        <member name="M:XIVSlothCombo.Attributes.BlueInactiveAttribute.#ctor(System.UInt32[])">
            <summary> List of each action the feature uses the user does not have active. Initializes a new instance of the <see cref="T:XIVSlothCombo.Attributes.BlueInactiveAttribute"/> class. </summary>
            <param name="actionIDs"> List of actions the preset replaces. </param>
        </member>
        <member name="T:XIVSlothCombo.Attributes.ConflictingCombosAttribute">
            <summary> Attribute documenting conflicting presets for each combo. </summary>
        </member>
        <member name="M:XIVSlothCombo.Attributes.ConflictingCombosAttribute.#ctor(XIVSlothCombo.Combos.CustomComboPreset[])">
            <summary> Initializes a new instance of the <see cref="T:XIVSlothCombo.Attributes.ConflictingCombosAttribute"/> class. </summary>
            <param name="conflictingPresets"> Presets that conflict with the given combo. </param>
        </member>
        <member name="P:XIVSlothCombo.Attributes.ConflictingCombosAttribute.ConflictingPresets">
            <summary> Gets the display name. </summary>
        </member>
        <member name="T:XIVSlothCombo.Attributes.CustomComboInfoAttribute">
            <summary> Attribute documenting additional information for each combo. </summary>
        </member>
        <member name="M:XIVSlothCombo.Attributes.CustomComboInfoAttribute.#ctor(System.String,System.String,System.Byte,System.Int32,System.String,System.String)">
            <summary> Initializes a new instance of the <see cref="T:XIVSlothCombo.Attributes.CustomComboInfoAttribute"/> class. </summary>
            <param name="fancyName"> Display name. </param>
            <param name="description"> Combo description. </param>
            <param name="jobID"> Associated job ID. </param>
            <param name="order"> Display order. </param>
            <param name="memeName"> Display meme name </param>
            <param name="memeDescription"> Meme description. </param>
        </member>
        <member name="P:XIVSlothCombo.Attributes.CustomComboInfoAttribute.FancyName">
            <summary> Gets the display name. </summary>
        </member>
        <member name="P:XIVSlothCombo.Attributes.CustomComboInfoAttribute.MemeName">
            <summary> Gets the meme name. </summary>
        </member>
        <member name="P:XIVSlothCombo.Attributes.CustomComboInfoAttribute.Description">
            <summary> Gets the description. </summary>
        </member>
        <member name="P:XIVSlothCombo.Attributes.CustomComboInfoAttribute.MemeDescription">
            <summary> Gets the meme description. </summary>
        </member>
        <member name="P:XIVSlothCombo.Attributes.CustomComboInfoAttribute.JobID">
            <summary> Gets the job ID. </summary>
        </member>
        <member name="P:XIVSlothCombo.Attributes.CustomComboInfoAttribute.Order">
            <summary> Gets the display order. </summary>
        </member>
        <member name="P:XIVSlothCombo.Attributes.CustomComboInfoAttribute.JobName">
            <summary> Gets the job name. </summary>
        </member>
        <member name="P:XIVSlothCombo.Attributes.CustomComboInfoAttribute.MemeJobName">
            <summary> Gets the meme job name. </summary>
        </member>
        <member name="T:XIVSlothCombo.Attributes.ParentComboAttribute">
            <summary> Attribute documenting required combo relationships. </summary>
        </member>
        <member name="M:XIVSlothCombo.Attributes.ParentComboAttribute.#ctor(XIVSlothCombo.Combos.CustomComboPreset)">
            <summary> Initializes a new instance of the <see cref="T:XIVSlothCombo.Attributes.ParentComboAttribute"/> class. </summary>
            <param name="parentPreset"> Presets that conflict with the given combo. </param>
        </member>
        <member name="P:XIVSlothCombo.Attributes.ParentComboAttribute.ParentPreset">
            <summary> Gets the display name. </summary>
        </member>
        <member name="T:XIVSlothCombo.Attributes.ReplaceSkillAttribute">
            <summary> Attribute documenting which skill each preset replace. </summary>
        </member>
        <member name="M:XIVSlothCombo.Attributes.ReplaceSkillAttribute.#ctor(System.UInt32[])">
            <summary> List of each action the feature replaces. Initializes a new instance of the <see cref="T:XIVSlothCombo.Attributes.ReplaceSkillAttribute"/> class. </summary>
            <param name="actionIDs"> List of actions the preset replaces. </param>
        </member>
        <member name="T:XIVSlothCombo.Attributes.SecretCustomComboAttribute">
            <summary> Attribute designating secret combos. </summary>
        </member>
        <member name="T:XIVSlothCombo.Combos.CustomComboPreset">
            <summary> Combo presets. </summary>
        </member>
        <member name="T:XIVSlothCombo.Core.IconReplacer">
            <summary> This class facilitates icon replacement. </summary>
        </member>
        <member name="M:XIVSlothCombo.Core.IconReplacer.#ctor">
            <summary> Initializes a new instance of the <see cref="T:XIVSlothCombo.Core.IconReplacer"/> class. </summary>
        </member>
        <member name="M:XIVSlothCombo.Core.IconReplacer.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:XIVSlothCombo.Core.IconReplacer.OriginalHook(System.UInt32)">
            <summary> Calls the original hook. </summary>
            <param name="actionID"> Action ID. </param>
            <returns> The result from the hook. </returns>
        </member>
        <member name="T:XIVSlothCombo.Core.PluginAddressResolver">
            <summary> Plugin address resolver. </summary>
        </member>
        <member name="P:XIVSlothCombo.Core.PluginAddressResolver.ComboTimer">
            <summary> Gets the address of the member ComboTimer. </summary>
        </member>
        <member name="P:XIVSlothCombo.Core.PluginAddressResolver.LastComboMove">
            <summary> Gets the address of the member LastComboMove. </summary>
        </member>
        <member name="P:XIVSlothCombo.Core.PluginAddressResolver.GetAdjustedActionId">
            <summary> Gets the address of fpGetAdjustedActionId. </summary>
        </member>
        <member name="P:XIVSlothCombo.Core.PluginAddressResolver.IsActionIdReplaceable">
            <summary> Gets the address of fpIsIconReplacable. </summary>
        </member>
        <member name="M:XIVSlothCombo.Core.PluginAddressResolver.Setup64Bit(Dalamud.Game.SigScanner)">
            <inheritdoc/>
        </member>
        <member name="T:XIVSlothCombo.Core.PluginConfiguration">
            <summary> Plugin configuration. </summary>
        </member>
        <member name="P:XIVSlothCombo.Core.PluginConfiguration.Version">
            <summary> Gets or sets the configuration version. </summary>
        </member>
        <member name="P:XIVSlothCombo.Core.PluginConfiguration.EnabledActions">
            <summary> Gets or sets the collection of enabled combos. </summary>
        </member>
        <member name="P:XIVSlothCombo.Core.PluginConfiguration.EnabledActions4">
            <summary> Gets or sets the collection of enabled combos. </summary>
        </member>
        <member name="P:XIVSlothCombo.Core.PluginConfiguration.EnabledOutputLog">
            <summary> Gets or sets a value indicating whether to output combat log to the chatbox. </summary>
        </member>
        <member name="P:XIVSlothCombo.Core.PluginConfiguration.HideConflictedCombos">
            <summary> Gets or sets a value indicating whether to hide combos which conflict with enabled presets. </summary>
        </member>
        <member name="P:XIVSlothCombo.Core.PluginConfiguration.HideChildren">
            <summary> Gets or sets a value indicating whether to hide the children of a feature if it is disabled. </summary>
        </member>
        <member name="P:XIVSlothCombo.Core.PluginConfiguration.MeleeOffset">
            <summary> Gets or sets the offset of the melee range check. Default is 0. </summary>
        </member>
        <member name="M:XIVSlothCombo.Core.PluginConfiguration.IsEnabled(XIVSlothCombo.Combos.CustomComboPreset)">
            <summary> Gets a value indicating whether a preset is enabled. </summary>
            <param name="preset"> Preset to check. </param>
            <returns> The boolean representation. </returns>
        </member>
        <member name="M:XIVSlothCombo.Core.PluginConfiguration.IsSecret(XIVSlothCombo.Combos.CustomComboPreset)">
            <summary> Gets a value indicating whether a preset is secret. </summary>
            <param name="preset"> Preset to check. </param>
            <returns> The boolean representation. </returns>
        </member>
        <member name="M:XIVSlothCombo.Core.PluginConfiguration.GetParent(XIVSlothCombo.Combos.CustomComboPreset)">
            <summary> Gets the parent combo preset if it exists, or null. </summary>
            <param name="preset"> Preset to check. </param>
            <returns> The parent preset. </returns>
        </member>
        <member name="M:XIVSlothCombo.Core.PluginConfiguration.GetConflicts(XIVSlothCombo.Combos.CustomComboPreset)">
            <summary> Gets an array of conflicting combo presets. </summary>
            <param name="preset"> Preset to check. </param>
            <returns> The conflicting presets. </returns>
        </member>
        <member name="M:XIVSlothCombo.Core.PluginConfiguration.GetAllConflicts">
            <summary> Gets the full list of conflicted combos. </summary>
        </member>
        <member name="M:XIVSlothCombo.Core.PluginConfiguration.GetAllConflictOriginals">
            <summary> Get all the info from conflicted combos. </summary>
        </member>
        <member name="M:XIVSlothCombo.Core.PluginConfiguration.GetCustomFloatValue(System.String,System.Single)">
            <summary> Gets a custom float value. </summary>
        </member>
        <member name="M:XIVSlothCombo.Core.PluginConfiguration.SetCustomFloatValue(System.String,System.Single)">
            <summary> Sets a custom float value. </summary>
        </member>
        <member name="M:XIVSlothCombo.Core.PluginConfiguration.GetCustomIntValue(System.String,System.Int32)">
            <summary> Gets a custom integer value. </summary>
        </member>
        <member name="M:XIVSlothCombo.Core.PluginConfiguration.SetCustomIntValue(System.String,System.Int32)">
            <summary> Sets a custom integer value. </summary>
        </member>
        <member name="M:XIVSlothCombo.Core.PluginConfiguration.GetCustomBoolValue(System.String)">
            <summary> Gets a custom boolean value. </summary>
        </member>
        <member name="M:XIVSlothCombo.Core.PluginConfiguration.SetCustomBoolValue(System.String,System.Boolean)">
            <summary> Sets a custom boolean value. </summary>
        </member>
        <member name="M:XIVSlothCombo.Core.PluginConfiguration.GetCustomBoolArrayValue(System.String)">
            <summary> Gets a custom boolean array value. </summary>
        </member>
        <member name="M:XIVSlothCombo.Core.PluginConfiguration.SetCustomBoolArrayValue(System.String,System.Boolean[])">
            <summary> Sets a custom boolean array value. </summary>
        </member>
        <member name="P:XIVSlothCombo.Core.PluginConfiguration.ActiveBLUSpells">
            <summary> Gets active Blue Mage (BLU) spells. </summary>
        </member>
        <member name="P:XIVSlothCombo.Core.PluginConfiguration.DancerDanceCompatActionIDs">
            <summary> Gets or sets an array of 4 ability IDs to interact with the <see cref="F:XIVSlothCombo.Combos.CustomComboPreset.DNC_DanceComboReplacer"/> combo. </summary>
        </member>
        <member name="P:XIVSlothCombo.Core.PluginConfiguration.MudraPathSelection">
            <summary> Handles Mudra path selection for <see cref="F:XIVSlothCombo.Combos.CustomComboPreset.NIN_Simple_Mudras"/>. </summary>
        </member>
        <member name="P:XIVSlothCombo.Core.PluginConfiguration.SpecialEvent">
            <summary> Handles 'special event' feature naming. </summary>
        </member>
        <member name="P:XIVSlothCombo.Core.PluginConfiguration.HideMessageOfTheDay">
            <summary> Hides the message of the day. </summary>
        </member>
        <member name="M:XIVSlothCombo.Core.PluginConfiguration.Save">
            <summary> Save the configuration to disk. </summary>
        </member>
        <member name="T:XIVSlothCombo.CustomComboNS.CustomCombo">
            <summary> Base class for each combo. </summary>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.CustomCombo.#ctor">
            <summary> Initializes a new instance of the <see cref="T:XIVSlothCombo.CustomComboNS.CustomCombo"/> class. </summary>
        </member>
        <member name="P:XIVSlothCombo.CustomComboNS.CustomCombo.Preset">
            <summary> Gets the preset associated with this combo. </summary>
        </member>
        <member name="P:XIVSlothCombo.CustomComboNS.CustomCombo.ClassID">
            <summary> Gets the class ID associated with this combo. </summary>
        </member>
        <member name="P:XIVSlothCombo.CustomComboNS.CustomCombo.JobID">
            <summary> Gets the job ID associated with this combo. </summary>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.CustomCombo.TryInvoke(System.UInt32,System.Byte,System.UInt32,System.Single,System.UInt32@)">
            <summary> Performs various checks then attempts to invoke the combo. </summary>
            <param name="actionID"> Starting action ID. </param>
            <param name="level"> Player level. </param>
            <param name="lastComboMove"> Last combo action ID. </param>
            <param name="comboTime"> Combo timer. </param>
            <param name="newActionID"> Replacement action ID. </param>
            <returns> True if the action has changed, otherwise false. </returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.CustomCombo.Invoke(System.UInt32,System.UInt32,System.Single,System.Byte)">
            <summary> Invokes the combo. </summary>
            <param name="actionID"> Starting action ID. </param>
            <param name="lastComboActionID"> Last combo action. </param>
            <param name="comboTime"> Current combo time. </param>
            <param name="level"> Current player level. </param>
            <returns>The replacement action ID. </returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.OriginalHook(System.UInt32)">
            <summary> Calls the original hook. </summary>
            <param name="actionID"> Action ID. </param>
            <returns> The result from the hook. </returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.IsOriginal(System.UInt32)">
            <summary> Compare the original hook to the given action ID. </summary>
            <param name="actionID"> Action ID. </param>
            <returns> A value indicating whether the action would be modified. </returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.LevelChecked(System.UInt32)">
            <summary> Checks if the player is high enough level to use the passed ID. </summary>
            <param name="id"> ID of the action. </param>
            <returns></returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.GetActionName(System.UInt32)">
            <summary> Returns the name of an action from its ID. </summary>
            <param name="id"> ID of the action. </param>
            <returns></returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.GetLevel(System.UInt32)">
            <summary> Returns the level required for an action from its ID. </summary>
            <param name="id"> ID of the action. </param>
            <returns></returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.ActionReady(System.UInt32)">
            <summary> Checks if the player can use an action based on the level required and off cooldown / has charges.</summary>
            <param name="id"> ID of the action. </param>
            <returns></returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.WasLastAction(System.UInt32)">
            <summary> Checks if the last action performed was the passed ID. </summary>
            <param name="id"> ID of the action. </param>
            <returns></returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.LastActionCounter">
            <summary> Returns how many times in a row the last action was used. </summary>
            <returns></returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.WasLastWeaponskill(System.UInt32)">
            <summary> Checks if the last weaponskill used was the passed ID. Does not have to be the last action performed, just the last weaponskill used. </summary>
            <param name="id"> ID of the action. </param>
            <returns></returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.WasLastSpell(System.UInt32)">
            <summary> Checks if the last spell used was the passed ID. Does not have to be the last action performed, just the last spell used. </summary>
            <param name="id"> ID of the action. </param>
            <returns></returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.WasLastAbility(System.UInt32)">
            <summary> Checks if the last ability used was the passed ID. Does not have to be the last action performed, just the last ability used. </summary>
            <param name="id"> ID of the action. </param>
            <returns></returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.IsSpellActive(System.UInt32)">
            <summary> Returns if the player has set the spell as active in the Blue Mage Spellbook </summary>
            <param name="id"> ID of the BLU spell. </param>
            <returns></returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.CalcBestAction(System.UInt32,System.UInt32[])">
            <summary> Calculate the best action to use, based on cooldown remaining. If there is a tie, the original is used. </summary>
            <param name="original"> The original action. </param>
            <param name="actions"> Action data. </param>
            <returns> The appropriate action to use. </returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.CanWeave(System.UInt32,System.Double)">
            <summary> Checks if the provided actionID has enough cooldown remaining to weave against it without causing clipping.</summary>
            <param name="actionID"> Action ID to check. </param>
            <param name="weaveTime"> Time when weaving window is over. Defaults to 0.7. </param>
            <returns> True or false. </returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.CanSpellWeave(System.UInt32,System.Double)">
            <summary> Checks if the provided actionID has enough cooldown remaining to weave against it without causing clipping and checks if you're casting a spell. </summary>
            <param name="actionID"> Action ID to check. </param>
            <param name="weaveTime"> Time when weaving window is over. Defaults to 0.6. </param>
            <returns> True or false. </returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.CanDelayedWeave(System.UInt32,System.Double,System.Double)">
            <summary> Checks if the provided actionID has enough cooldown remaining to weave against it in the later portion of the GCD without causing clipping. </summary>
            <param name="actionID"> Action ID to check. </param>
            <param name="start"> Time (in seconds) to start to check for the weave window. </param>
            <param name="end"> Time (in seconds) to end the check for the weave window. </param>
            <returns> True or false. </returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.GetCooldown(System.UInt32)">
            <summary> Gets the cooldown data for an action. </summary>
            <param name="actionID"> Action ID to check. </param>
            <returns> Cooldown data. </returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.GetCooldownRemainingTime(System.UInt32)">
            <summary> Gets the cooldown total remaining time. </summary>
            <param name="actionID"> Action ID to check. </param>
            <returns> Total remaining time of the cooldown. </returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.GetCooldownChargeRemainingTime(System.UInt32)">
            <summary> Gets the cooldown remaining time for the next charge. </summary>
            <param name="actionID"> Action ID to check. </param>
            <returns> Remaining time for the next charge of the cooldown. </returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.IsOnCooldown(System.UInt32)">
            <summary> Gets a value indicating whether an action is on cooldown. </summary>
            <param name="actionID"> Action ID to check. </param>
            <returns> True or false. </returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.IsOffCooldown(System.UInt32)">
            <summary> Gets a value indicating whether an action is off cooldown. </summary>
            <param name="actionID"> Action ID to check. </param>
            <returns> True or false. </returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.JustUsed(System.UInt32)">
            <summary> Check if the Cooldown was just used. </summary>
            <param name="actionID"> Action ID to check. </param>
            <returns> True or false. </returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.HasCharges(System.UInt32)">
            <summary> Gets a value indicating whether an action has any available charges. </summary>
            <param name="actionID"> Action ID to check. </param>
            <returns> True or false. </returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.GetRemainingCharges(System.UInt32)">
            <summary> Get the current number of charges remaining for an action. </summary>
            <param name="actionID"> Action ID to check. </param>
            <returns> Number of charges. </returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.GetMaxCharges(System.UInt32)">
            <summary> Get the maximum number of charges for an action. </summary>
            <param name="actionID"> Action ID to check. </param>
            <returns> Number of charges. </returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.IsEnabled(XIVSlothCombo.Combos.CustomComboPreset)">
            <summary> Determine if the given preset is enabled. </summary>
            <param name="preset"> Preset to check. </param>
            <returns> A value indicating whether the preset is enabled. </returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.IsNotEnabled(XIVSlothCombo.Combos.CustomComboPreset)">
            <summary> Determine if the given preset is not enabled. </summary>
            <param name="preset"> Preset to check. </param>
            <returns> A value indicating whether the preset is not enabled. </returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.CheckMovement">
            <summary> Checks player movement </summary>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.IsInParty">
            <summary> Checks if player is in a party </summary>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.GetPartyMembers">
            <summary> Gets the party list </summary>
            <returns> Current party list. </returns>
        </member>
        <member name="P:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.LocalPlayer">
            <summary> Gets the player or null. </summary>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.HasCondition(Dalamud.Game.ClientState.Conditions.ConditionFlag)">
            <summary> Find if the player has a certain condition. </summary>
            <param name="flag"> Condition flag. </param>
            <returns> A value indicating whether the player is in the condition. </returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.InCombat">
            <summary> Find if the player is in combat. </summary>
            <returns> A value indicating whether the player is in combat. </returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.HasPetPresent">
            <summary> Find if the player has a pet present. </summary>
            <returns> A value indicating whether the player has a pet (fairy/carbuncle) present. </returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.HasCompanionPresent">
            <summary> Find if the player has a companion (chocobo) present. </summary>
            <returns> A value indicating whether the player has a companion (chocobo). </returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.InPvP">
            <summary> Checks if the player is in a PVP enabled zone. </summary>
            <returns> A value indicating whether the player is in a PVP enabled zone. </returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.GetResourceCost(System.UInt32)">
            <summary> Gets the Resource Cost of the action. </summary>
            <param name="actionID"> Action ID to check. </param>
            <returns></returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.IsResourceTypeNormal(System.UInt32)">
            <summary> Gets the Resource Type of the action. </summary>
            <param name="actionID"> Action ID to check. </param>
            <returns></returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.GetJobGauge``1">
            <summary> Get a job gauge. </summary>
            <typeparam name="T"> Type of job gauge.</typeparam>
            <returns> The job gauge. </returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.HasEffect(System.UInt16)">
            <summary> Find if an effect on the player exists. The effect may be owned by the player or unowned. </summary>
            <param name="effectID"> Status effect ID. </param>
            <returns> A value indicating if the effect exists. </returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.FindEffect(System.UInt16)">
            <summary> Finds an effect on the player. The effect must be owned by the player or unowned. </summary>
            <param name="effectID"> Status effect ID. </param>
            <returns> Status object or null. </returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.TargetHasEffect(System.UInt16)">
            <summary> Find if an effect on the target exists. The effect must be owned by the player or unowned. </summary>
            <param name="effectID"> Status effect ID. </param>
            <returns> A value indicating if the effect exists. </returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.FindTargetEffect(System.UInt16)">
            <summary> Finds an effect on the current target. The effect must be owned by the player or unowned. </summary>
            <param name="effectID"> Status effect ID. </param>
            <returns> Status object or null. </returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.GetDebuffRemainingTime(System.UInt16)">
            <summary></summary>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.HasEffectAny(System.UInt16)">
            <summary> Find if an effect on the player exists. The effect may be owned by anyone or unowned. </summary>
            <param name="effectID"> Status effect ID. </param>
            <returns> A value indicating if the effect exists. </returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.FindEffectAny(System.UInt16)">
            <summary> Finds an effect on the player. The effect may be owned by anyone or unowned. </summary>
            <param name="effectID"> Status effect ID. </param>
            <returns> Status object or null. </returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.TargetHasEffectAny(System.UInt16)">
            <summary> Find if an effect on the target exists. The effect may be owned by anyone or unowned. </summary>
            <param name="effectID"> Status effect ID. </param>
            <returns> A value indicating if the effect exists. </returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.FindTargetEffectAny(System.UInt16)">
            <summary> Finds an effect on the current target. The effect may be owned by anyone or unowned. </summary>
            <param name="effectID"> Status effect ID. </param>
            <returns> Status object or null. </returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.FindEffect(System.UInt16,Dalamud.Game.ClientState.Objects.Types.GameObject,System.Nullable{System.UInt32})">
            <summary> Finds an effect on the given object. </summary>
            <param name="effectID"> Status effect ID. </param>
            <param name="obj"> Object to look for effects on. </param>
            <param name="sourceID"> Source object ID. </param>
            <returns> Status object or null. </returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.FindEffectOnMember(System.UInt16,Dalamud.Game.ClientState.Objects.Types.GameObject)">
            <summary> Checks a member object for an effect. The effect may be owned by anyone or unowned. </summary>
             <param name="effectID"> Status effect ID. </param>
             <param name="obj"></param>
             <return> Status object or null. </return>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.GetStatusName(System.UInt32)">
            <summary> Returns the name of a status effect from its ID. </summary>
            <param name="id"> ID of the status. </param>
            <returns></returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.HasSilence">
            <summary> Checks if the character has the Silence status. </summary>
            <returns></returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.HasPacification">
            <summary> Checks if the character has the Pacification status. </summary>
            <returns></returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.HasAmnesia">
            <summary> Checks if the character has the Amnesia status. </summary>
            <returns></returns>
        </member>
        <member name="P:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.CurrentTarget">
            <summary> Gets the current target or null. </summary>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.HasTarget">
            <summary> Find if the player has a target. </summary>
            <returns> A value indicating whether the player has a target. </returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.GetTargetDistance">
            <summary> Gets the distance from the target. </summary>
            <returns> Double representing the distance from the target. </returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.InMeleeRange">
            <summary> Gets a value indicating whether you are in melee range from the current target. </summary>
            <returns> Bool indicating whether you are in melee range. </returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.GetTargetHPPercent(Dalamud.Game.ClientState.Objects.Types.GameObject)">
            <summary> Gets a value indicating target's HP Percent. CurrentTarget is default unless specified </summary>
            <returns> Double indicating percentage. </returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.CanInterruptEnemy">
            <summary> Determines if the enemy can be interrupted if they are currently casting. </summary>
            <returns> Bool indicating whether they can be interrupted or not. </returns>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.SetTarget(Dalamud.Game.ClientState.Objects.Types.GameObject)">
            <summary> Sets the player's target. </summary>
            <param name="target"> Target must be a game object that the player can normally click and target. </param>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.IsInRange(Dalamud.Game.ClientState.Objects.Types.GameObject)">
            <summary> Checks if target is in appropriate range for targeting </summary>
            <param name="target"> The target object to check </param>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.TargetObject(XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.TargetType)">
            <summary> Attempts to target the given party member </summary>
            <param name="target"></param>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.UpdateCombatTimer(System.Object,System.EventArgs)">
            <summary> Called by the timer in the constructor to keep track of combat duration. </summary>
        </member>
        <member name="M:XIVSlothCombo.CustomComboNS.Functions.CustomComboFunctions.CombatEngageDuration">
            <summary> Tells the elapsed time since the combat started. </summary>
            <returns> Combat time in seconds. </returns>
        </member>
        <member name="T:XIVSlothCombo.Data.CooldownData">
            <summary> Internal cooldown data. </summary>
        </member>
        <member name="P:XIVSlothCombo.Data.CooldownData.IsCooldown">
            <summary> Gets a value indicating whether the action is on cooldown. </summary>
        </member>
        <member name="P:XIVSlothCombo.Data.CooldownData.ActionID">
            <summary> Gets the action ID on cooldown. </summary>
        </member>
        <member name="P:XIVSlothCombo.Data.CooldownData.CooldownElapsed">
            <summary> Gets the elapsed cooldown time. </summary>
        </member>
        <member name="P:XIVSlothCombo.Data.CooldownData.CooldownTotal">
            <summary> Gets the total cooldown time. </summary>
        </member>
        <member name="P:XIVSlothCombo.Data.CooldownData.CooldownRemaining">
            <summary> Gets the cooldown time remaining. </summary>
        </member>
        <member name="P:XIVSlothCombo.Data.CooldownData.MaxCharges">
            <summary> Gets the maximum number of charges for an action at the current level. </summary>
            <returns> Number of charges. </returns>
        </member>
        <member name="P:XIVSlothCombo.Data.CooldownData.HasCharges">
            <summary> Gets a value indicating whether the action has charges, not charges available. </summary>
        </member>
        <member name="P:XIVSlothCombo.Data.CooldownData.RemainingCharges">
            <summary> Gets the remaining number of charges for an action. </summary>
        </member>
        <member name="P:XIVSlothCombo.Data.CooldownData.ChargeCooldownRemaining">
            <summary> Gets the cooldown time remaining until the next charge. </summary>
        </member>
        <member name="T:XIVSlothCombo.Data.CustomComboCache">
            <summary> Cached conditional combo logic. </summary>
        </member>
        <member name="M:XIVSlothCombo.Data.CustomComboCache.#ctor">
            <summary> Initializes a new instance of the <see cref="T:XIVSlothCombo.Data.CustomComboCache"/> class. </summary>
        </member>
        <member name="M:XIVSlothCombo.Data.CustomComboCache.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:XIVSlothCombo.Data.CustomComboCache.GetJobGauge``1">
            <summary> Gets a job gauge. </summary>
            <typeparam name="T"> Type of job gauge. </typeparam>
            <returns> The job gauge. </returns>
        </member>
        <member name="M:XIVSlothCombo.Data.CustomComboCache.GetStatus(System.UInt32,Dalamud.Game.ClientState.Objects.Types.GameObject,System.Nullable{System.UInt32})">
            <summary> Finds a status on the given object. </summary>
            <param name="statusID"> Status effect ID. </param>
            <param name="obj"> Object to look for effects on. </param>
            <param name="sourceID"> Source object ID. </param>
            <returns> Status object or null. </returns>
        </member>
        <member name="M:XIVSlothCombo.Data.CustomComboCache.GetCooldown(System.UInt32)">
            <summary> Gets the cooldown data for an action. </summary>
            <param name="actionID"> Action ID to check. </param>
            <returns> Cooldown data. </returns>
        </member>
        <member name="M:XIVSlothCombo.Data.CustomComboCache.GetMaxCharges(System.UInt32)">
            <summary> Get the maximum number of charges for an action. </summary>
            <param name="actionID"> Action ID to check. </param>
            <returns> Max number of charges at current and max level. </returns>
        </member>
        <member name="M:XIVSlothCombo.Data.CustomComboCache.GetResourceCost(System.UInt32)">
            <summary> Get the resource cost of an action. </summary>
            <param name="actionID"> Action ID to check. </param>
            <returns> Returns the resource cost of an action. </returns>
        </member>
        <member name="M:XIVSlothCombo.Data.CustomComboCache.GetCooldownGroup(System.UInt32)">
            <summary> Get the cooldown group of an action. </summary>
            <param name="actionID"> Action ID to check. </param>
        </member>
        <member name="M:XIVSlothCombo.Data.CustomComboCache.Framework_Update(Dalamud.Game.Framework)">
            <summary> Triggers when the game framework updates. Clears cooldown and status caches. </summary>
        </member>
        <member name="T:XIVSlothCombo.Services.Service">
            <summary> Dalamud and plugin services. </summary>
        </member>
        <member name="P:XIVSlothCombo.Services.Service.Address">
            <summary> Gets or sets the plugin address resolver. </summary>
        </member>
        <member name="P:XIVSlothCombo.Services.Service.BuddyList">
            <summary> Gets the Dalamud buddy list. </summary>
        </member>
        <member name="P:XIVSlothCombo.Services.Service.ChatGui">
            <summary> Gets the Dalamud chat gui. </summary>
        </member>
        <member name="P:XIVSlothCombo.Services.Service.ClassLocked">
            <summary> Facilitates class-based locking. </summary>
        </member>
        <member name="P:XIVSlothCombo.Services.Service.ClientState">
            <summary> Gets the Dalamud client state. </summary>
        </member>
        <member name="P:XIVSlothCombo.Services.Service.ComboCache">
            <summary> Gets or sets the plugin caching mechanism. </summary>
        </member>
        <member name="P:XIVSlothCombo.Services.Service.CommandManager">
            <summary> Gets the Dalamud command manager. </summary>
        </member>
        <member name="P:XIVSlothCombo.Services.Service.Condition">
            <summary> Gets the Dalamud condition. </summary>
        </member>
        <member name="P:XIVSlothCombo.Services.Service.Configuration">
            <summary> Gets or sets the plugin configuration. </summary>
        </member>
        <member name="P:XIVSlothCombo.Services.Service.DataManager">
            <summary> Gets the Dalamud data manager. </summary>
        </member>
        <member name="P:XIVSlothCombo.Services.Service.Framework">
            <summary> Gets the Dalamud framework manager. </summary>
        </member>
        <member name="P:XIVSlothCombo.Services.Service.GameGui">
            <summary> Handles the in-game UI. </summary>
        </member>
        <member name="P:XIVSlothCombo.Services.Service.IconReplacer">
            <summary> Gets or sets the plugin icon replacer. </summary>
        </member>
        <member name="P:XIVSlothCombo.Services.Service.Interface">
            <summary> Gets the Dalamud plugin interface. </summary>
        </member>
        <member name="P:XIVSlothCombo.Services.Service.JobGauges">
            <summary> Gets the Dalamud job gauges. </summary>
        </member>
        <member name="P:XIVSlothCombo.Services.Service.ObjectTable">
            <summary> Gets the Dalamud object table. </summary>
        </member>
        <member name="P:XIVSlothCombo.Services.Service.PluginFolder">
            <summary> Returns the Plugin Folder location </summary>
        </member>
        <member name="P:XIVSlothCombo.Services.Service.PartyList">
            <summary> Gets the Dalamud party list. </summary>
        </member>
        <member name="P:XIVSlothCombo.Services.Service.SigScanner">
            <summary> Facilitates searching for memory signatures. </summary>
        </member>
        <member name="P:XIVSlothCombo.Services.Service.TargetManager">
            <summary> Gets the Dalamud target manager. </summary>
        </member>
        <member name="T:XIVSlothCombo.Window.ConfigWindow">
            <summary> Plugin configuration window. </summary>
        </member>
        <member name="M:XIVSlothCombo.Window.ConfigWindow.#ctor">
            <summary> Initializes a new instance of the <see cref="T:XIVSlothCombo.Window.ConfigWindow"/> class. </summary>
        </member>
        <member name="M:XIVSlothCombo.Window.Functions.Presets.EnableParentPresets(XIVSlothCombo.Combos.CustomComboPreset)">
            <summary> Iterates up a preset's parent tree, enabling each of them. </summary>
            <param name="preset"> Combo preset to enabled. </param>
        </member>
        <member name="M:XIVSlothCombo.Window.Functions.UserConfig.DrawSliderInt(System.Int32,System.Int32,System.String,System.String,System.Single,System.UInt32)">
            <summary> Draws a slider that lets the user set a given value for their feature. </summary>
            <param name="minValue"> The absolute minimum value you'll let the user pick. </param>
            <param name="maxValue"> The absolute maximum value you'll let the user pick. </param>
            <param name="config"> The config ID. </param>
            <param name="sliderDescription"> Description of the slider. Appends to the right of the slider. </param>
            <param name="itemWidth"> How long the slider should be. </param>
            <param name="sliderIncrement"> How much you want the user to increment the slider by. Uses SliderIncrements as a preset. </param>
        </member>
        <member name="M:XIVSlothCombo.Window.Functions.UserConfig.DrawSliderFloat(System.Single,System.Single,System.String,System.String,System.Single)">
            <summary> Draws a slider that lets the user set a given value for their feature. </summary>
            <param name="minValue"> The absolute minimum value you'll let the user pick. </param>
            <param name="maxValue"> The absolute maximum value you'll let the user pick. </param>
            <param name="config"> The config ID. </param>
            <param name="sliderDescription"> Description of the slider. Appends to the right of the slider. </param>
            <param name="itemWidth"> How long the slider should be. </param>
        </member>
        <member name="M:XIVSlothCombo.Window.Functions.UserConfig.DrawRoundedSliderFloat(System.Single,System.Single,System.String,System.String,System.Single)">
            <summary> Draws a slider that lets the user set a given value for their feature. </summary>
            <param name="minValue"> The absolute minimum value you'll let the user pick. </param>
            <param name="maxValue"> The absolute maximum value you'll let the user pick. </param>
            <param name="config"> The config ID. </param>
            <param name="sliderDescription"> Description of the slider. Appends to the right of the slider. </param>
            <param name="itemWidth"> How long the slider should be. </param>
        </member>
        <member name="M:XIVSlothCombo.Window.Functions.UserConfig.DrawRadioButton(System.String,System.String,System.String,System.Int32,System.Single,System.Numerics.Vector4)">
            <summary> Draws a checkbox intended to be linked to other checkboxes sharing the same config value. </summary>
            <param name="config"> The config ID. </param>
            <param name="checkBoxName"> The name of the feature. </param>
            <param name="checkboxDescription"> The description of the feature. </param>
            <param name="outputValue"> If the user ticks this box, this is the value the config will be set to. </param>
            <param name="itemWidth"></param>
            <param name="descriptionColor"></param>
        </member>
        <member name="M:XIVSlothCombo.Window.Functions.UserConfig.DrawHorizontalRadioButton(System.String,System.String,System.String,System.Int32,System.Single,System.Numerics.Vector4)">
            <summary> Draws a checkbox in a horizontal configuration intended to be linked to other checkboxes sharing the same config value. </summary>
            <param name="config"> The config ID. </param>
            <param name="checkBoxName"> The name of the feature. </param>
            <param name="checkboxDescription"> The description of the feature. </param>
            <param name="outputValue"> If the user ticks this box, this is the value the config will be set to. </param>
            <param name="itemWidth"></param>
            <param name="descriptionColor"></param>
        </member>
        <member name="M:XIVSlothCombo.Window.Functions.UserConfig.DrawHorizontalMultiChoice(System.String,System.String,System.String,System.Int32,System.Int32,System.Single,System.Numerics.Vector4)">
            <summary> Draws multi choice checkboxes in a horizontal configuration. </summary>
            <param name="config"> The config ID. </param>
            <param name="checkBoxName"> The name of the feature. </param>
            <param name="checkboxDescription"> The description of the feature. </param>
            <param name="totalChoices"> The total number of options for the feature </param>
            /// <param name="choice"> If the user ticks this box, this is the value the config will be set to. </param>
            <param name="itemWidth"></param>
            <param name="descriptionColor"></param>
        </member>
        <member name="M:XIVSlothCombo.Window.Functions.UserConfigItems.Draw(XIVSlothCombo.Combos.CustomComboPreset,System.Boolean)">
            <summary> Draws the User Configurable settings. </summary>
            <param name="preset"> The preset it's attached to. </param>
            <param name="enabled"> If it's enabled or not. </param>
        </member>
        <member name="T:XIVSlothCombo.XIVSlothCombo">
            <summary> Main plugin implementation. </summary>
        </member>
        <member name="M:XIVSlothCombo.XIVSlothCombo.#ctor(Dalamud.Plugin.DalamudPluginInterface)">
            <summary> Initializes a new instance of the <see cref="T:XIVSlothCombo.XIVSlothCombo"/> class. </summary>
            <param name="pluginInterface"> Dalamud plugin interface. </param>
        </member>
        <member name="P:XIVSlothCombo.XIVSlothCombo.Name">
            <inheritdoc/>
        </member>
        <member name="M:XIVSlothCombo.XIVSlothCombo.Dispose">
            <inheritdoc/>
        </member>
    </members>
</doc>
